// Code generated by mockery v2.10.0. DO NOT EDIT.

package automock

import (
	context "context"
	"github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"

	pkgmodel "github.com/kyma-incubator/compass/components/director/pkg/model"
)

// SystemAuthService is an autogenerated mock type for the SystemAuthService type
type SystemAuthService struct {
	mock.Mock
}

// DeleteByIDForObject provides a mock function with given fields: ctx, objectType, authID
func (_m *SystemAuthService) DeleteByIDForObject(ctx context.Context, objectType pkgmodel.SystemAuthReferenceObjectType, authID string) error {
	ret := _m.Called(ctx, objectType, authID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pkgmodel.SystemAuthReferenceObjectType, string) error); ok {
		r0 = rf(ctx, objectType, authID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByIDForObject provides a mock function with given fields: ctx, objectType, authID
func (_m *SystemAuthService) GetByIDForObject(ctx context.Context, objectType pkgmodel.SystemAuthReferenceObjectType, authID string) (*pkgmodel.SystemAuth, error) {
	ret := _m.Called(ctx, objectType, authID)

	var r0 *pkgmodel.SystemAuth
	if rf, ok := ret.Get(0).(func(context.Context, pkgmodel.SystemAuthReferenceObjectType, string) *pkgmodel.SystemAuth); ok {
		r0 = rf(ctx, objectType, authID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkgmodel.SystemAuth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, pkgmodel.SystemAuthReferenceObjectType, string) error); ok {
		r1 = rf(ctx, objectType, authID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByToken provides a mock function with given fields: ctx, token
func (_m *SystemAuthService) GetByToken(ctx context.Context, token string) (*pkgmodel.SystemAuth, error) {
	ret := _m.Called(ctx, token)

	var r0 *pkgmodel.SystemAuth
	if rf, ok := ret.Get(0).(func(context.Context, string) *pkgmodel.SystemAuth); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkgmodel.SystemAuth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGlobal provides a mock function with given fields: ctx, id
func (_m *SystemAuthService) GetGlobal(ctx context.Context, id string) (*pkgmodel.SystemAuth, error) {
	ret := _m.Called(ctx, id)

	var r0 *pkgmodel.SystemAuth
	if rf, ok := ret.Get(0).(func(context.Context, string) *pkgmodel.SystemAuth); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkgmodel.SystemAuth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateToken provides a mock function with given fields: ctx, id
func (_m *SystemAuthService) InvalidateToken(ctx context.Context, id string) (*pkgmodel.SystemAuth, error) {
	ret := _m.Called(ctx, id)

	var r0 *pkgmodel.SystemAuth
	if rf, ok := ret.Get(0).(func(context.Context, string) *pkgmodel.SystemAuth); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkgmodel.SystemAuth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, item
func (_m *SystemAuthService) Update(ctx context.Context, item *pkgmodel.SystemAuth) error {
	ret := _m.Called(ctx, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkgmodel.SystemAuth) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateValue provides a mock function with given fields: ctx, id, item
func (_m *SystemAuthService) UpdateValue(ctx context.Context, id string, item *model.Auth) (*pkgmodel.SystemAuth, error) {
	ret := _m.Called(ctx, id, item)

	var r0 *pkgmodel.SystemAuth
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Auth) *pkgmodel.SystemAuth); ok {
		r0 = rf(ctx, id, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkgmodel.SystemAuth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *model.Auth) error); ok {
		r1 = rf(ctx, id, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
